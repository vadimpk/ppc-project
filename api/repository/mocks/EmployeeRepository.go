// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vadimpk/ppc-project/entity"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepository struct {
	mock.Mock
}

// AssignServices provides a mock function with given fields: ctx, employeeID, serviceIDs
func (_m *EmployeeRepository) AssignServices(ctx context.Context, employeeID int, serviceIDs []int) error {
	ret := _m.Called(ctx, employeeID, serviceIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) error); ok {
		r0 = rf(ctx, employeeID, serviceIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, employee
func (_m *EmployeeRepository) Create(ctx context.Context, employee *entity.Employee) error {
	ret := _m.Called(ctx, employee)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Employee) error); ok {
		r0 = rf(ctx, employee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *EmployeeRepository) Get(ctx context.Context, id int) (*entity.Employee, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: ctx, employeeID
func (_m *EmployeeRepository) GetServices(ctx context.Context, employeeID int) ([]entity.BusinessService, error) {
	ret := _m.Called(ctx, employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []entity.BusinessService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.BusinessService, error)); ok {
		return rf(ctx, employeeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.BusinessService); ok {
		r0 = rf(ctx, employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BusinessService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, businessID
func (_m *EmployeeRepository) List(ctx context.Context, businessID int) ([]entity.Employee, error) {
	ret := _m.Called(ctx, businessID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]entity.Employee, error)); ok {
		return rf(ctx, businessID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Employee); ok {
		r0 = rf(ctx, businessID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, businessID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveServices provides a mock function with given fields: ctx, employeeID, serviceIDs
func (_m *EmployeeRepository) RemoveServices(ctx context.Context, employeeID int, serviceIDs []int) error {
	ret := _m.Called(ctx, employeeID, serviceIDs)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) error); ok {
		r0 = rf(ctx, employeeID, serviceIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, employee
func (_m *EmployeeRepository) Update(ctx context.Context, employee *entity.Employee) error {
	ret := _m.Called(ctx, employee)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Employee) error); ok {
		r0 = rf(ctx, employee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmployeeRepository creates a new instance of EmployeeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeRepository {
	mock := &EmployeeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
